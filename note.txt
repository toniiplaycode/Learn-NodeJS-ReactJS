- npx create-react-app my-app: cài đặt môi trường react thì tự động nó cài một đống
- vào folder my-app gõ npm start để chạy project, mặc định nó chạy trên cổng 3000
- hạ React 18 xuống ReactJS 17 làm theo AskIT (https://www.youtube.com/watch?v=rKOEjUqBbX8&list=PLncHg6Kn2JT4C0enPGQPK7ZIlEoZ1ZvRy&index=8) (không xuống theo thì về sau code lỗi)
- cấu trúc lại các file trong project từ 1 đống file nó tự cài (https://youtu.be/JsQfIjzaBNE?t=608), tạo các folder: assets, component, routes, store, styles, utils, views. Trong assets có 2 folder là images, audio
    + folder assets chứa các file muốn public ra ngoài ảnh, video, audio,...
    + folder components là nơi để chia sẻ, sử dụng lại, tái sử dụng các component
    + folder routes là nơi định nghĩa các route (các đường dẫn của trang web)
    + folder services để gọi API, kết nối với back-end
    + folder store để viết Redux
    + folder styles để viết các file SCSS
    + folder utils chứa các function dùng chung
    + folder views là các trang (page)
- xoá bớt vài file không cần thiết và đổi tên phần mở rộng của vài file (https://youtu.be/JsQfIjzaBNE?t=1218)
- trong project này dùng SCSS để CSS nhanh hơn
- tải package sass để dùng SCSS (npm i sass) và đổi tên phần mở rộng CSS thành SCSS
- tổ chức lại file (https://youtu.be/JsQfIjzaBNE?t=1693)
- components là chia code UI thành những khối độc lập, từ nhiều components đó gộp lại thành 1 website
- có 2 loại component: class component và function component (function bình thường và arrow function)
- bình thường 1 biến sẽ gán 1 giá trị gì đó (string, số, hằng số,...). nhưng cú pháp JSX sẽ gán 1 thẻ HTML (HTML được bọc trong dấu "()") và viết được JS (biến, xử lý logic)  được bên trong HTML (mã JS được bọc trong dấu "{}" ). 1 hàm trong JS return HTML đó được gọi là JSX, comment JS trong JEX dùng "{/**/}", JSX (JavaScript XML)
    * lưu ý: 
        + JSX chỉ trả về 1 block element DOM muốn trả về nhiều block thì:
            #cách 1: có 1 thằng block cha bao ở ngoài các block con (cách này thì bên DOM HTML sẽ có 1 block cha bọc ở ngoài)
            #cách 2: dùng Fragment (cách này vẫn trả ra được nhiều block, nhưng không có block cha nào bọc ở ngoài, version ReactJS cũ thì dùng "<Fragment></Fragment>", version mới thì chỉ cần "<></>" )
        + đặt class cho thẻ HTML thì dùng className
- tạo file myComponent.js để viết 1 class component và sử dụng component đó trong file App.js, để sử dụng được 1 component thì import nó và dùng như thẻ tag HTML <tên component/> hoặc <tên component><tên component/>
    * lưu ý: đặt tên cho component không được dùng camelCase mà phải đặt theo PascalCase
- state là một đối tượng JavaScript chứa các thuộc tính của một component và có thể thay đổi trong quá trình thực thi của component đó. Khi state của một component thay đổi, React sẽ tự động cập nhật giao diện của component để phản ánh các thay đổi đó(real time). stage là một object gồm key và value. Ví dụ về state bên file MyComponent.js
- để truy xuất được value trong state dùng: this.state.<tên key>
- cài React Dev Tools extension, công dụng (https://chat.openai.com/chat/b6511a33-f798-46ca-8237-ba1ebd107cfd)
- Handling Events: xử lý events với React. Ví dụ hàm xử lý sự kiện được viết ở file MyComponent.js và được xử dụng ở file App.js
    * lưu ý:
        + tên hàm xử lý events đặt kiểu camelCase (nhớ kĩ)
        + tên sự kiện cũng phải đặt camelCase (nhớ kĩ)
        + vì mình đang dùng JSX nên tên hàm sự kiện phải đặt trong dấu "{}"
            ex: <button onClick={() => this.handleFunction()}> click me! /button> // hàm handleFunction được khai báo trên rendet()
- khai báo biến, hàm, state ở phạm vi nằm trên render() được gọi là các thuộc tính của component đó, khi muốn truy cập đến các thuộc tính ta dùng "this". Còn các biến, hàm trong phạm render() được gọi là các biến local, hàm local thì ta truy xuất như bình thường 
- setState là hàm dùng để cập nhật lại thuộc tính của state và đồng thời React nó sẽ tự động re-render (gọi lại hàm render()) để hiện ra giao diện ngay lập tức
- tạo file FormComponent.js để lấy dữ liệu từ form, dữ liệu ở form sẽ được lưu vào state. Trong ứng dụng thực tế từ các dữ liệu có trong state đó, ta truyền dữ liệu state đó lên API cho back-end xử lý (phía server side)
- tree components: để xem quan hệ CHA-CON vào components của devTools xem
- tạo child component của 1 component, tạo file ChildComponent.js là component con của 1 component import vào
- props dùng để truyền dữ liệu từ component CHA xuống component CON và không thể truyền ngược lại, props có kiểu dữ liệu là object giống như state
- 1 component cha có thể chứa nhiều component con, nên dùng KEY của React cho mỗi component con, vì mỗi component con sẽ có props (dữ liệu) khác nhau, nếu ta muốn thay đổi cụ thể 1 component con trong nhiều component con khác thì dùng KEY sẽ rất hiệu quả
    + KEY sẽ không hiện ở trong DOM, React nó sẽ tự biết KEY của mỗi component con do mình đặ
- Stateless component (không sử dụng được state, trừ khi sử dụng Hooks) và Statefull component (sử dụng được state) tương ứng với function component và class component (https://chat.openai.com/chat/e4be8ecb-da35-4f86-b854-568c957077ef)
    + function chỉ cần return để render, class cần hàm render() để render
    + class có thể dùng state để lưu trữ và quản lý dữ liệu, dùng được các lifecycle methods
    + function không dùng được state lẫn lifecycle methods, trừ khi sử dụng Hooks
    --> nên dùng function component khi dùng Hooks, còn bình thường thì dùng class component
- Condition trong React vẫn dùng if else bình thường
    + nhưng React dùng "&&" còn ngắn ngọn hơn cách dùng if else bình thường, logic so sánh sẽ trước trước "&&", nếu logic đúng thì các đoạn code ở sau "&&" sẽ được thực thi
    + nếu dùng Ternary Operator còn ngắn gọn nữa: condition ? true : false
    -->  nếu là JSX thì vẫn phải nằm trong khối block hoặc Fragment
- Split Components là chia tách các component 
- function as props: truyền hàm từ component CHA xuống cho component CON (truyền props), component CON sẽ gọi hàm và hàm của component CHA sẽ thực thi
- Virtual DOM là một bản sao của real DOM, các thay đổi trên trang web được thực hiện trên DOM ảo, sau đó DOM ảo và DOM thật so sánh sự khác biệt và chỉ có những thành phần thay đổi mới được cập nhật
- Lifecycle methods trong ReactJS là các phương thức mà React gọi khi một component được tạo ra, cập nhật hoặc xóa khỏi DOM. Các phương thức này cho phép can thiệp vào quá trình rendering và update của component, giúp bạn quản lý component hiệu quả hơn. Có ba nhóm lifecycle methods trong ReactJS: mounting, updating và unmounting (https://chat.openai.com/chat/2d69f171-c081-49ae-aca0-0df4135aa381)
- tạo folder TodoApp để làm todo app, tạo component ListToDo.js và ListToDo.scss
- tạo component AddToDo.js để thêm todo
- npm i react-toastify: tải thư viên toastify để dùng các theme toastify có sẵn, lên trang (https://fkhadra.github.io/react-toastify/introduction/) để copy code các theme toastify sẵn có
- npm i react-router-dom@5.3.0: tải thư viện router dùng để chuyển trang, tải đúng version 
- thư viện react-router-dom này còn được gọi là "Single Pages Application", điểm mạnh nhất của ReactJS
- tạo folder Nav và file Nav.js, Nav.scss để thêm thanh navigation
- tạo component file HomeComponent.js để làm route HOME
- tách component thành các route riêng
- Link & NavLink : dùng để chuyển các route mà không load lại trang  
    + links: không active được route đang hoạt động
    + NavLinks: active được route đang hoạt động
- withRouter là HOC, khi dùng withRouter thì component sẽ nhận được props gồm: history, location, match, với những props này ta có thể:
    + lấy được tham số trên route
    + điều hướng trang
        * các props hay dùng:
            - this.props.history.push('/<route>'): điều hướng trang
            - this.props.match.params.<tên tham số mình truyền ở path>: lấy tham số trên route
- HOC(higher-order component) là 1 hàm, nhận tham số là 1 component và trả về 1 component mới thì component đó sẽ có thêm nhiều props, HOC giúp trách lập lại code và sử dụng lại logic cho nhiều component khác nhau
- tạo folder HOC để tựsviết HOC, tạo file color.js để tạo màu chữ random, dùng function component để viết hàm HOC (vì hàm này chỉ nhận props, không dùng state)
- Axios là thư viện, dùng để tương tác với API để lấy dữ liệu, Axios hỗ trợ Promise và async/await. Axios cung cấp các phương thức GET, POST, PUT, DELETE
- npm i @testing-library/react@12.1.2, mặc định là cài bản mới nhất là 13.5.0, nhưng do mình dùng React 17 nên phải hạ xuống 12.1.2 mới cài được axios, nếu không hạ test-library/react xuống 12.1.2 thì sẽ không cài được axios, nếu dùng React 18 thì khỏi cần hạ 
- npm i axios: cài thư viện axios
- tạo component ListUserComponent.js dùng axios (promise hoặc async/await) để lấy dữ liệu từ API và lưu vào state rồi render ra
- route paramaters: truyền tham số lên route, dùng để chuyển trang, ví dụ: truyền id của user để xem chi tiết user đó
- muốn lấy tham số trên route thì dùng hàm withRouter của react-router-dom
- import images: lưu ảnh trong folder assets/images, khi muốn dùng ảnh thì import ảnh, không nên dùng thẳng trong thuộc tính src trong thẻ img
- Redux là thư viện quản lý state(state của Redux chứ không phải state của React), Redux nó chạy song song với React, tất cả state của ứng dụng được lưu vào "stores" và các component có thể truy cập, cập nhật các state đó thông qua các "actions" được gửi đến "reducers". Reducers nhận các actions và xử lý để cập nhật lại các state trong stores (https://chat.openai.com/chat/0da1f2e2-9f11-497b-9a19-36ae2e949db1)
- npm i redux react-redux: cài 2 thư viện Redux 
- Redux sẽ bọc component App (component to nhất) bên file App.js để Redux sẽ được khởi động cùng với React
- tạo 2 folder actions, reducers trong folder store. Redux sẽ được viết trong folder store
- viết reducer trong file rootReducer.js
- mapping state(redux) to props(react): truyền dữ liệu từ state Redux xuống props React, hàm mapStateToProps được dùng bên HomeComponent.js để lấy được state của Redux. Dùng hàm connect HOC mới có thể kết nối HomeComponent với Redux. Các component nào muốn kết nối với Redux để dùng state (state của Redux) thì phải dùng hàm connect HOC
- Thêm/Xoá/Sửa state của Redux thì phải thông qua "action", action là Redux là 1 object, action gồm type và payload
    + type: tên của action
    + payload: dữ liệu liên quan đến action
    --> action phải có type, còn payload thì không bắt buộc
- muốn dùng được action thì dùng hàm mapDispatchToProps    
- cài Redux devTools và config trong file index.js để thấy được state, action của Redux